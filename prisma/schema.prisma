generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["strictUndefinedChecks"]
}

// generator kysely {
//   provider = "prisma-kysely"

//   output   = "../types"
//   fileName = "kysely.ts"
// }

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())

    givenName  String @default("")
    familyName String @default("")

    emailAddress String @unique
    password     String

    emailVerified                 Boolean   @default(false)
    emailVerifiedAt               DateTime?
    emailVerificationToken        String?   @unique
    emailVerificationTokenExpires DateTime?

    created DateTime @default(now())
    updated DateTime @updatedAt

    Notification    Notification[]
    StudyMember     StudyMember[]
    StudyInvitation StudyInvitation[]

    @@index([emailAddress])
}

model Notification {
    id String @id @default(cuid())

    title String  @default("")
    body  String  @default("")
    type  String  @default("info")
    url   String  @default("")
    read  Boolean @default(false)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model Study {
    id String @id @default(cuid())

    title    String
    acronym  String?
    imageUrl String  @default("https://picsum.photos/400")

    updated DateTime @updatedAt
    created DateTime @default(now())

    StudyDescription    StudyDescription[]
    StudyStatus         StudyStatus[]
    StudySponsors       StudySponsors[]
    StudyOversight      StudyOversight[]
    StudyDesign         StudyDesign[]
    StudyEligibilty     StudyEligibilty[]
    StudyIdentification StudyIdentification[]
    StudyCollaborators  StudyCollaborators[]
    StudyConditions     StudyConditions[]
    StudyKeywords       StudyKeywords[]
    StudyArm            StudyArm[]
    StudyIntervention   StudyIntervention[]
    StudyCentralContact StudyCentralContact[]
    StudyLocation       StudyLocation[]
    StudyMember         StudyMember[]
    StudyInvitation     StudyInvitation[]
}

model StudyMember {
    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    owner Boolean @default(false)
    role  String  @default("viewer") // owner | admin | editor | viewer

    updated DateTime @updatedAt
    created DateTime @default(now())

    @@id([studyId, userId])
}

model StudyInvitation {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    userId String? // for users with  accounts
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    emailAddress String? // for users with no accounts

    role String @default("viewer") // owner | admin | editor | viewer

    updated DateTime @updatedAt
    created DateTime @default(now())

    @@unique([studyId, userId])
    @@unique([studyId, emailAddress])
}

model StudyDescription {
    id String @id @default(cuid())

    studyId String @unique
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    briefSummary        String @default("")
    detailedDescription String @default("")

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyStatus {
    id String @id @default(cuid())

    studyId String @unique
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    overallStatus String?
    whyStopped    String?

    startDate     DateTime?
    startDateType String?

    completionDate     DateTime?
    completionDateType String?

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudySponsors {
    id String @id @default(cuid())

    studyId String @unique
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    responsiblePartyType                                       String?
    responsiblePartyInvestigatorGivenName                      String?
    responsiblePartyInvestigatorFamilyName                     String?
    responsiblePartyInvestigatorTitle                          String?
    responsiblePartyInvestigatorIdentifierScheme               String?
    responsiblePartyInvestigatorIdentifierValue                String?
    responsiblePartyInvestigatorAffiliationName                String?
    responsiblePartyInvestigatorAffiliationIdentifier          String?
    responsiblePartyInvestigatorAffiliationIdentifierScheme    String?
    responsiblePartyInvestigatorAffiliationIdentifierSchemeUri String?

    leadSponsorName                String?
    leadSponsorIdentifier          String?
    leadSponsorIdentifierScheme    String?
    leadSponsorIdentifierSchemeUri String?

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyOversight {
    id String @id @default(cuid())

    studyId String @unique
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    fdaRegulatedDrug         String?
    fdaRegulatedDevice       String?
    humanSubjectReviewStatus String?
    hasDmc                   String?

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyDesign {
    id String @id @default(cuid())

    studyId String @unique
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    studyType String?

    designAllocation         String?
    designInterventionModel  String?
    designPrimaryPurpose     String?
    designMasking            String?
    designMaskingDescription String?
    designWhoMaskedList      String[]

    phaseList String[]

    enrollmentCount Int?
    enrollmentType  String?

    numberOfArms Int?

    designOberservationalModelList String[]
    designTimePerspectiveList      String[]

    bioSpecRetention   String?
    bioSpecDescription String?

    targetDuration    String?
    isPatientRegistry String?

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyEligibilty {
    id String @id @default(cuid())

    studyId String @unique
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    sex               String?
    genderBased       String?
    genderDescription String?

    minimumAgeValue String?
    minimumAgeUnit  String?

    maximumAgeValue String?
    maximumAgeUnit  String?

    healthyVolunteers String?

    inclusionCriteria String[]
    exclusionCriteria String[]

    studyPopulation String
    samplingMethod  String?

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyIdentification {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    identifier       String
    identifierType   String?
    identifierDomain String?
    identifierLink   String
    isSecondary      Boolean @default(false)

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyCollaborators {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    name       String
    identifier String
    scheme     String
    schemeUri  String

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyConditions {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    name               String
    classificationCode String
    scheme             String
    schemeUri          String
    conditionUri       String

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyKeywords {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    name               String
    classificationCode String
    scheme             String
    schemeUri          String
    keywordUri         String

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyArm {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    label       String
    type        String?
    description String

    interventionList String[]

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyIntervention {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    type        String?
    name        String
    description String

    otherNameList String[]

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyCentralContact {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    givenName  String
    familyName String

    degree String

    identifier       String
    identifierScheme String

    affiliation                 String
    affiliationIdentifier       String
    affiliationIdentifierScheme String

    phone    String
    phoneExt String

    emailAddress String

    updated DateTime @updatedAt
    created DateTime @default(now())
}

model StudyLocation {
    id String @id @default(cuid())

    studyId String
    study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

    facility            String
    status              String?
    city                String
    state               String
    zip                 String
    country             String
    identifier          String
    identifierScheme    String
    identifierSchemeUri String

    updated                  DateTime                   @updatedAt
    created                  DateTime                   @default(now())
    StudyLocationContactList StudyLocationContactList[]
}

model StudyLocationContactList {
    id String @id @default(cuid())

    locationId String
    location   StudyLocation @relation(fields: [locationId], references: [id])

    givenName  String
    familyName String

    identifier          String
    identifierScheme    String
    identifierSchemeUri String

    role String

    phone    String
    phoneExt String

    emailAddress String

    updated DateTime @updatedAt
    created DateTime @default(now())
}
