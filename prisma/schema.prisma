generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["strictUndefinedChecks"]
}

// generator kysely {
//   provider = "prisma-kysely"

//   output   = "../types"
//   fileName = "kysely.ts"
// }

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())

    givenName  String @default("")
    familyName String @default("")

    emailAddress String @unique
    password     String

    emailVerified                 Boolean   @default(false)
    emailVerifiedAt               DateTime?
    emailVerificationToken        String?   @unique
    emailVerificationTokenExpires DateTime?

    created DateTime @default(now())
    updated DateTime @updatedAt

    Notification Notification[]
    Study        Study[] // To quickly query all studies a user is involved in

    @@index([emailAddress])
}

model Notification {
    id String @id @default(cuid())

    title String  @default("")
    body  String  @default("")
    type  String  @default("info")
    url   String  @default("")
    read  Boolean @default(false)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    created DateTime @default(now())
    updated DateTime @updatedAt
}

enum StudyRole {
    owner
    admin
    editor
    viewer
}

enum ContributorStatus {
    invited
    accepted
    declined
}

model Study {
    id          String   @id @default(cuid())
    title       String
    description String
    image       String?
    keywords    String[]

    ownerId           String
    owner             User                    @relation(fields: [ownerId], references: [id])
    role              StudyRole
    size              Int                     @default(0)
    updatedOn         DateTime                @updatedAt
    createdOn         DateTime                @default(now())
    contributors      StudyContributor[]
    publishedVersions StudyPublishedVersion[]
    collaborators     StudyCollaborator[]
}

model StudyPublishedVersion {
    id      String   @id @default(cuid())
    date    DateTime
    doi     String
    version String
    study   Study    @relation(fields: [studyId], references: [id])
    studyId String
}

model StudyCollaborator {
    id                  String  @id @default(cuid())
    givenName           String?
    familyName          String?
    identifierScheme    String?
    identifierSchemeUri String?
    originalId          String?
    study               Study   @relation(fields: [studyId], references: [id])
    studyId             String
}

model StudyContributor {
    id           String            @id @default(cuid())
    givenName    String
    familyName   String
    emailAddress String
    ORCID        String?
    role         String
    status       ContributorStatus
    token        String?
    updatedRole  String
    study        Study             @relation(fields: [studyId], references: [id])
    studyId      String
}
